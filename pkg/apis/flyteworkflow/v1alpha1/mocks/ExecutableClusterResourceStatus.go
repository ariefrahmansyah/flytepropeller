// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// ExecutableClusterResourceStatus is an autogenerated mock type for the ExecutableClusterResourceStatus type
type ExecutableClusterResourceStatus struct {
	mock.Mock
}

type ExecutableClusterResourceStatus_GetBarrierClockTick struct {
	*mock.Call
}

func (_m ExecutableClusterResourceStatus_GetBarrierClockTick) Return(_a0 uint32) *ExecutableClusterResourceStatus_GetBarrierClockTick {
	return &ExecutableClusterResourceStatus_GetBarrierClockTick{Call: _m.Call.Return(_a0)}
}

func (_m *ExecutableClusterResourceStatus) OnGetBarrierClockTick() *ExecutableClusterResourceStatus_GetBarrierClockTick {
	c_call := _m.On("GetBarrierClockTick")
	return &ExecutableClusterResourceStatus_GetBarrierClockTick{Call: c_call}
}

func (_m *ExecutableClusterResourceStatus) OnGetBarrierClockTickMatch(matchers ...interface{}) *ExecutableClusterResourceStatus_GetBarrierClockTick {
	c_call := _m.On("GetBarrierClockTick", matchers...)
	return &ExecutableClusterResourceStatus_GetBarrierClockTick{Call: c_call}
}

// GetBarrierClockTick provides a mock function with given fields:
func (_m *ExecutableClusterResourceStatus) GetBarrierClockTick() uint32 {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

type ExecutableClusterResourceStatus_GetLastPhaseUpdatedAt struct {
	*mock.Call
}

func (_m ExecutableClusterResourceStatus_GetLastPhaseUpdatedAt) Return(_a0 time.Time) *ExecutableClusterResourceStatus_GetLastPhaseUpdatedAt {
	return &ExecutableClusterResourceStatus_GetLastPhaseUpdatedAt{Call: _m.Call.Return(_a0)}
}

func (_m *ExecutableClusterResourceStatus) OnGetLastPhaseUpdatedAt() *ExecutableClusterResourceStatus_GetLastPhaseUpdatedAt {
	c_call := _m.On("GetLastPhaseUpdatedAt")
	return &ExecutableClusterResourceStatus_GetLastPhaseUpdatedAt{Call: c_call}
}

func (_m *ExecutableClusterResourceStatus) OnGetLastPhaseUpdatedAtMatch(matchers ...interface{}) *ExecutableClusterResourceStatus_GetLastPhaseUpdatedAt {
	c_call := _m.On("GetLastPhaseUpdatedAt", matchers...)
	return &ExecutableClusterResourceStatus_GetLastPhaseUpdatedAt{Call: c_call}
}

// GetLastPhaseUpdatedAt provides a mock function with given fields:
func (_m *ExecutableClusterResourceStatus) GetLastPhaseUpdatedAt() time.Time {
	ret := _m.Called()

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

type ExecutableClusterResourceStatus_GetPhase struct {
	*mock.Call
}

func (_m ExecutableClusterResourceStatus_GetPhase) Return(_a0 int) *ExecutableClusterResourceStatus_GetPhase {
	return &ExecutableClusterResourceStatus_GetPhase{Call: _m.Call.Return(_a0)}
}

func (_m *ExecutableClusterResourceStatus) OnGetPhase() *ExecutableClusterResourceStatus_GetPhase {
	c_call := _m.On("GetPhase")
	return &ExecutableClusterResourceStatus_GetPhase{Call: c_call}
}

func (_m *ExecutableClusterResourceStatus) OnGetPhaseMatch(matchers ...interface{}) *ExecutableClusterResourceStatus_GetPhase {
	c_call := _m.On("GetPhase", matchers...)
	return &ExecutableClusterResourceStatus_GetPhase{Call: c_call}
}

// GetPhase provides a mock function with given fields:
func (_m *ExecutableClusterResourceStatus) GetPhase() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

type ExecutableClusterResourceStatus_GetPhaseVersion struct {
	*mock.Call
}

func (_m ExecutableClusterResourceStatus_GetPhaseVersion) Return(_a0 uint32) *ExecutableClusterResourceStatus_GetPhaseVersion {
	return &ExecutableClusterResourceStatus_GetPhaseVersion{Call: _m.Call.Return(_a0)}
}

func (_m *ExecutableClusterResourceStatus) OnGetPhaseVersion() *ExecutableClusterResourceStatus_GetPhaseVersion {
	c_call := _m.On("GetPhaseVersion")
	return &ExecutableClusterResourceStatus_GetPhaseVersion{Call: c_call}
}

func (_m *ExecutableClusterResourceStatus) OnGetPhaseVersionMatch(matchers ...interface{}) *ExecutableClusterResourceStatus_GetPhaseVersion {
	c_call := _m.On("GetPhaseVersion", matchers...)
	return &ExecutableClusterResourceStatus_GetPhaseVersion{Call: c_call}
}

// GetPhaseVersion provides a mock function with given fields:
func (_m *ExecutableClusterResourceStatus) GetPhaseVersion() uint32 {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

type ExecutableClusterResourceStatus_GetPluginState struct {
	*mock.Call
}

func (_m ExecutableClusterResourceStatus_GetPluginState) Return(_a0 []byte) *ExecutableClusterResourceStatus_GetPluginState {
	return &ExecutableClusterResourceStatus_GetPluginState{Call: _m.Call.Return(_a0)}
}

func (_m *ExecutableClusterResourceStatus) OnGetPluginState() *ExecutableClusterResourceStatus_GetPluginState {
	c_call := _m.On("GetPluginState")
	return &ExecutableClusterResourceStatus_GetPluginState{Call: c_call}
}

func (_m *ExecutableClusterResourceStatus) OnGetPluginStateMatch(matchers ...interface{}) *ExecutableClusterResourceStatus_GetPluginState {
	c_call := _m.On("GetPluginState", matchers...)
	return &ExecutableClusterResourceStatus_GetPluginState{Call: c_call}
}

// GetPluginState provides a mock function with given fields:
func (_m *ExecutableClusterResourceStatus) GetPluginState() []byte {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

type ExecutableClusterResourceStatus_GetPluginStateVersion struct {
	*mock.Call
}

func (_m ExecutableClusterResourceStatus_GetPluginStateVersion) Return(_a0 uint32) *ExecutableClusterResourceStatus_GetPluginStateVersion {
	return &ExecutableClusterResourceStatus_GetPluginStateVersion{Call: _m.Call.Return(_a0)}
}

func (_m *ExecutableClusterResourceStatus) OnGetPluginStateVersion() *ExecutableClusterResourceStatus_GetPluginStateVersion {
	c_call := _m.On("GetPluginStateVersion")
	return &ExecutableClusterResourceStatus_GetPluginStateVersion{Call: c_call}
}

func (_m *ExecutableClusterResourceStatus) OnGetPluginStateVersionMatch(matchers ...interface{}) *ExecutableClusterResourceStatus_GetPluginStateVersion {
	c_call := _m.On("GetPluginStateVersion", matchers...)
	return &ExecutableClusterResourceStatus_GetPluginStateVersion{Call: c_call}
}

// GetPluginStateVersion provides a mock function with given fields:
func (_m *ExecutableClusterResourceStatus) GetPluginStateVersion() uint32 {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}
